/*
 * Teleport
 * Copyright (C) 2024  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package teleport.notifications.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "teleport/notifications/v1/notifications.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/notifications/v1;notificationsv1";

// NotificationService provides CRUD operations for notifications resources.
service NotificationService {
  // CreateUserNotification creates a user-specific notification.
  rpc CreateUserNotification(CreateUserNotificationRequest) returns (Notification);
  // DeleteUserNotification deletes a user-specific notification.
  rpc DeleteUserNotification(DeleteUserNotificationRequest) returns (google.protobuf.Empty);

  // CreateGlobalNotification creates a global notification.
  rpc CreateGlobalNotification(CreateGlobalNotificationRequest) returns (GlobalNotification);
  // DeleteGlobalNotification deletes a global notification.
  rpc DeleteGlobalNotification(DeleteGlobalNotificationRequest) returns (google.protobuf.Empty);

  // ListNotifications returns a paginated list of a user's notifications, which include user-specific ones as well as global notifications that match them.
  rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse);

  // UpsertUserNotificationState creates or updates a user notification state which records whether the user has clicked on or dismissed a notification.
  rpc UpsertUserNotificationState(UpsertUserNotificationStateRequest) returns (UserNotificationState);

  // UpsertUserLastSeenNotification creates or updates a user's last seen notification item.
  rpc UpsertUserLastSeenNotification(UpsertUserLastSeenNotificationRequest) returns (UserLastSeenNotification);
}

// CreateUserNotificationRequest is the request for creating a user-specific notification.
message CreateUserNotificationRequest {
  // username is the username of the user the notification to create is for.
  string username = 1;
  // notification is the notification to create.
  Notification notification = 2;
}

// DeleteUserNotificationRequest is the request for deleting a user-specific notification.
message DeleteUserNotificationRequest {
  // username is the username of the user the notification to delete is for.
  string username = 1;
  // notification_id is the ID of the notification to delete.
  string notification_id = 2;
}

// ListNotificationsRequest is the request for listing a user's notifications, which include user-specific ones as well as global notifications that match them.
message ListNotificationsRequest {
  // page_size is the size of the page to return.
  int32 page_size = 1;
  // user_notifications_page_token is the next_page_token value for user notifications returned from a previous ListUserNotifications request, if any.
  // Since we fetch notifications from two different lists simultaneously (user-specific notifications and global notifications), we keep track of the page_token for each.
  string user_notifications_page_token = 2;
  // global_notifications_page_token is the next_page_token value for global notifications returned from a previous ListUserNotifications request, if any.
  string global_notifications_page_token = 3;
}

// ListNotificationsResponse is the response from listing a user's notifications, which include user-specific ones as well as global notifications that match them.
message ListNotificationsResponse {
  // notifications is the notifications returned.
  repeated Notification notifications = 1;
  // user_notifications_next_page_token is the next_page_token value containing the key of the first user notification item on the next page, if any.
  // Since we fetch notifications from two different lists simultaneously (user-specific notifications and global notifications), we keep track of the page_token for each.
  string user_notifications_next_page_token = 3;
  // global_notifications_next_page_token is the next_page_token value containing the key of the first global notification item on the next page, if any.
  string global_notifications_next_page_token = 4;
  // user_last_seen_notification_timestamp is the timestamp of the last notification the user has seen.
  google.protobuf.Timestamp user_last_seen_notification_timestamp = 5;
}

// CreateGlobalNotificationRequest is the request for creating a global notification.
message CreateGlobalNotificationRequest {
  // global_notification is the global notification to create.
  GlobalNotification global_notification = 1;
}

// DeleteGlobalNotificationRequest is the request for deleting a global notification.
message DeleteGlobalNotificationRequest {
  // notification_id is the ID of the notification to delete.
  string notification_id = 1;
}

// UpsertUserNotificationStateRequest is the request for creating or updating a user notification state.
message UpsertUserNotificationStateRequest {
  // username is the username of the user.
  string username = 1;
  // user_notification_state is the user notification state to create.
  UserNotificationState user_notification_state = 2;
}

// UpsertUserLastSeenNotificationRequest is the request for creating or updating a user's last seen notification.
message UpsertUserLastSeenNotificationRequest {
  // username is the username of the user.
  string username = 1;
  // user_notification_state is the updated user last seen notification item.
  UserLastSeenNotification user_last_seen_notification = 2;
}
